	Vector
	{
		int* m_items;
		size_t m_origSize;
		size_t m_blockSize;
		size_t m_size;
		size_t m_nItems;
	}
VectorCreate
VectorDestroy
VectorAdd
VectorDelete
VectorGet
VectorSet
VectorGetItemsNum
VectorPrint
*********************

	Stack
	{
		Vector* m_vec;
	}
StackCreate
StackDestroy
StackPush
StackPop
StackTop
StackIsEmpty
StackPrint
*********************
	Queue
	{
		int* m_items;
		size_t m_head;
		size_t m_tail;
		size_t m_size;
		size_t m_nItems
	}
QueueCreate
QueueDestroy
QueueInsert
QueueRemove
QueueIsEmpty	
*********************

SLL
{
	int m_data;
	SLL* m_mext;
}
ListInsertHead
ListInsertByKey
ListRemoveByKey
ListGetTail
ListPrint
*********************
Node
{
	int m_data;
	Node* m_next;
	Node* m_prev;
}

DLL
{
	Node* m_head;
	Node* m_tail;
	int m_magicNum;
}

ListCreate
ListDestroy
ListPushHead
ListPushTail
ListPopHead
ListPopTail
ListCountItems
ListIsEmpty
ListPrint


*********************
Node
{
	int m_data;
	Node* m_father;
	Node* m_left;
	Node* m_right;
}


BST
{
	Node* m_root;
	int m_magicNum;
}
TreeCreate(void)
TreeDestroy
TreeInsert
TreeIsDataFound
TreePrint

*********************
Heap
{
	Vector* m_vec;
	size_t m_heapSize;
	int m_magicNum;
}
HeapBuild
HeapDestroy
HeapInsert
HeapMax
HeapExtractMax
HeapItemsNum
HeapPrint


*********************
Hash
{
	int* m_data;
	size_t m_origSize;
	size_t m_hashSize;
	size_t m_maxCollisions;
	size_t m_numberOfInsertions;
	size_t m_totalCollisions;
	int m_magicNum;
}

HashCreate
HashDestroy
HashInsert
HashRemove
HashIsFound
HashCapacity
HashAveageCollisions
HashMaxCollisions
HashPrint


*********************
