Card game specification:
------------------------

1) One card deck with 52 cards.
2) Exactly 4 players.
3) Before beginning game, need to randomly shuffle deck.
4) Deal all cards to each player, one card + one player at a time (1 1 1 1, 2 2 2 2, 3 3 3 3 ...) 13 cards for each player.
5) Players hold cards in sorted manner (D1, D9, DA, H5, H7 ...).
6) When player (1) turn: select random card, place on table.
7) Now player (2) must place a larger card on top. if succeeded, both cards out of game, then player 2 places random card.
8) If player (2) doesnt have larger card, then (2) takes both cards and loses turn so now its player (3) turn.
9) Winner/s are first player/s without cards. To avoid deadlock, if after 20 rounds there is no winner, then stop game and see who has the smallest amount of cards (i.e. there can be 4 winners).
10) Need to design system thinking ahead so that potentially our classes can be used to make other games.
11) After dealing cards: print hands of all players
12) At end of game: print hands of all players.
13) give option that after every players move, pause game and show hands, then wait for command to continue to next move or continue till end.

								2


						1				3


						
								4

Player turns go in clockwise direction (player 1 is first)

D 2/../8/9/T/J/Q/K/A
H
C
S



My implementation:
Classes:
--------
CardGame
BareketCards
GameManager
Players
Player
Cards
Card


CardGame (Abstract base class):
-------------------------------
	Public (pure virtual):
		Shuffle(Cards* _cards);
		Start();
		Restart();
		Pause();
		Stop();
		PrintScore();
		PrintFinalScore();

	Protected:
/////////		GameManager*	m_manager;
		Players* 		m_players;
		Cards*  		m_deck;
		Cards*			m_board;
		size_t 			m_numOfPlayers;
		

BareketCards:
-------------
Inherits from CardGame



Card:
-----
	Public:
	
	
	Private:
		char 			m_suit;
		char 			m_val;
		unsigned int	m_owner;










